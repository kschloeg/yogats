"use strict";
var should = require('should');
var sinon = require('sinon');
var User = require('../model/User');
var UserDocumentManager = require('../model/UserDocumentManager');
var UserStatus = require('../model/UserStatus');
var UserManager = require('../lib/UserManager');
describe('UserManager', function () {
    var sandbox;
    var sampleUser;
    before(function () { });
    after(function () { });
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
        sampleUser = new User();
        sampleUser.first_name = "XYZ";
        sampleUser.create_date = new Date();
        sampleUser.status = UserStatus.ACTIVE;
    });
    afterEach(function () {
        sandbox.restore();
    });
    describe('create', function () {
        it('cascades result', function (done) {
            var repoSpy = sandbox.stub(UserDocumentManager, "create").callsArgWithAsync(1, null, new User({ first_name: "ABC" }));
            UserManager.create(sampleUser, function (err, user) {
                should.not.exist(err);
                should.exist(user);
                user.first_name.should.equal("ABC");
                repoSpy.callCount.should.eql(1);
                repoSpy.args[0][0].should.eql(sampleUser);
                done();
            });
        });
        it('cascades error', function (done) {
            var repoSpy = sandbox.stub(UserDocumentManager, "create").callsArgWithAsync(1, "error", null);
            UserManager.create(sampleUser, function (err, user) {
                should.exist(err);
                should.not.exist(user);
                err.should.equal("error");
                repoSpy.callCount.should.eql(1);
                done();
            });
        });
        it('survives null user', function (done) {
            var repoSpy = sandbox.stub(UserDocumentManager, "create").callsArgWithAsync(1, null, "repo result");
            UserManager.create(null, function (err, user) {
                should.exist(err);
                should.not.exist(user);
                repoSpy.callCount.should.eql(0);
                done();
            });
        });
    });
    describe('findById', function () {
        it('Tests not yet implemented', function (done) {
            done();
        });
    });
    describe('removeById', function () {
        it('Tests not yet implemented', function (done) {
            done();
        });
    });
    describe('update', function () {
        it('Tests not yet implemented', function (done) {
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIvbGliL1VzZXJNYW5hZ2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLElBQU8sTUFBTSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ2xDLElBQU8sS0FBSyxXQUFXLE9BQU8sQ0FBQyxDQUFDO0FBRWhDLElBQU8sSUFBSSxXQUFXLGVBQWUsQ0FBQyxDQUFDO0FBRXZDLElBQU8sbUJBQW1CLFdBQVcsOEJBQThCLENBQUMsQ0FBQztBQUNyRSxJQUFPLFVBQVUsV0FBVyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ25ELElBQU8sV0FBVyxXQUFXLG9CQUFvQixDQUFDLENBQUM7QUFFbkQsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUNwQixJQUFJLE9BQU8sQ0FBQztJQUNaLElBQUksVUFBeUIsQ0FBQztJQUU5QixNQUFNLENBQUMsY0FBUSxDQUFDLENBQUMsQ0FBQztJQUVsQixLQUFLLENBQUMsY0FBUSxDQUFDLENBQUMsQ0FBQztJQUVqQixVQUFVLENBQUM7UUFDUCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVqQyxVQUFVLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN4QixVQUFVLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUM5QixVQUFVLENBQUMsV0FBVyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDcEMsVUFBVSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDO1FBQ04sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNmLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxVQUFBLElBQUk7WUFDdEIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FBQyxpQkFBaUIsQ0FB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QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ1c2VyL2xpYi9Vc2VyTWFuYWdlci5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcbmltcG9ydCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5pbXBvcnQgc2hvdWxkID0gcmVxdWlyZSgnc2hvdWxkJyk7XG5pbXBvcnQgc2lub24gPSByZXF1aXJlKCdzaW5vbicpO1xuXG5pbXBvcnQgVXNlciA9IHJlcXVpcmUoJy4uL21vZGVsL1VzZXInKTtcbmltcG9ydCBVc2VySW50ZXJmYWNlID0gcmVxdWlyZSgnLi4vbW9kZWwvVXNlckludGVyZmFjZScpO1xuaW1wb3J0IFVzZXJEb2N1bWVudE1hbmFnZXIgPSByZXF1aXJlKCcuLi9tb2RlbC9Vc2VyRG9jdW1lbnRNYW5hZ2VyJyk7XG5pbXBvcnQgVXNlclN0YXR1cyA9IHJlcXVpcmUoJy4uL21vZGVsL1VzZXJTdGF0dXMnKTtcbmltcG9ydCBVc2VyTWFuYWdlciA9IHJlcXVpcmUoJy4uL2xpYi9Vc2VyTWFuYWdlcicpO1xuXG5kZXNjcmliZSgnVXNlck1hbmFnZXInLCAoKSA9PiB7XG4gICAgdmFyIHNhbmRib3g7XG4gICAgdmFyIHNhbXBsZVVzZXI6IFVzZXJJbnRlcmZhY2U7XG5cbiAgICBiZWZvcmUoKCkgPT4geyB9KTtcblxuICAgIGFmdGVyKCgpID0+IHsgfSk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgc2FuZGJveCA9IHNpbm9uLnNhbmRib3guY3JlYXRlKCk7XG5cbiAgICAgICAgc2FtcGxlVXNlciA9IG5ldyBVc2VyKCk7XG4gICAgICAgIHNhbXBsZVVzZXIuZmlyc3RfbmFtZSA9IFwiWFlaXCI7XG4gICAgICAgIHNhbXBsZVVzZXIuY3JlYXRlX2RhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBzYW1wbGVVc2VyLnN0YXR1cyA9IFVzZXJTdGF0dXMuQUNUSVZFO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgc2FuZGJveC5yZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY3JlYXRlJywgKCkgPT4ge1xuICAgICAgICBpdCgnY2FzY2FkZXMgcmVzdWx0JywgZG9uZSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVwb1NweSA9IHNhbmRib3guc3R1YihVc2VyRG9jdW1lbnRNYW5hZ2VyLCBcImNyZWF0ZVwiKS5jYWxsc0FyZ1dpdGhBc3luYygxLCBudWxsLCBuZXcgVXNlcih7IGZpcnN0X25hbWU6IFwiQUJDXCIgfSkpO1xuXG4gICAgICAgICAgICBVc2VyTWFuYWdlci5jcmVhdGUoc2FtcGxlVXNlciwgKGVyciwgdXNlcikgPT4ge1xuICAgICAgICAgICAgICAgIHNob3VsZC5ub3QuZXhpc3QoZXJyKTtcbiAgICAgICAgICAgICAgICBzaG91bGQuZXhpc3QodXNlcik7XG4gICAgICAgICAgICAgICAgdXNlci5maXJzdF9uYW1lLnNob3VsZC5lcXVhbChcIkFCQ1wiKTtcblxuICAgICAgICAgICAgICAgIHJlcG9TcHkuY2FsbENvdW50LnNob3VsZC5lcWwoMSk7XG4gICAgICAgICAgICAgICAgcmVwb1NweS5hcmdzWzBdWzBdLnNob3VsZC5lcWwoc2FtcGxlVXNlcik7XG5cbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ2Nhc2NhZGVzIGVycm9yJywgZG9uZSA9PiB7XG4gICAgICAgICAgICB2YXIgcmVwb1NweSA9IHNhbmRib3guc3R1YihVc2VyRG9jdW1lbnRNYW5hZ2VyLCBcImNyZWF0ZVwiKS5jYWxsc0FyZ1dpdGhBc3luYygxLCBcImVycm9yXCIsIG51bGwpO1xuXG4gICAgICAgICAgICBVc2VyTWFuYWdlci5jcmVhdGUoc2FtcGxlVXNlciwgKGVyciwgdXNlcikgPT4ge1xuICAgICAgICAgICAgICAgIHNob3VsZC5leGlzdChlcnIpO1xuICAgICAgICAgICAgICAgIHNob3VsZC5ub3QuZXhpc3QodXNlcik7XG4gICAgICAgICAgICAgICAgZXJyLnNob3VsZC5lcXVhbChcImVycm9yXCIpO1xuXG4gICAgICAgICAgICAgICAgcmVwb1NweS5jYWxsQ291bnQuc2hvdWxkLmVxbCgxKTtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3N1cnZpdmVzIG51bGwgdXNlcicsIGRvbmUgPT4ge1xuICAgICAgICAgICAgdmFyIHJlcG9TcHkgPSBzYW5kYm94LnN0dWIoVXNlckRvY3VtZW50TWFuYWdlciwgXCJjcmVhdGVcIikuY2FsbHNBcmdXaXRoQXN5bmMoMSwgbnVsbCwgXCJyZXBvIHJlc3VsdFwiKTtcbiAgICAgICAgICAgIFVzZXJNYW5hZ2VyLmNyZWF0ZShudWxsLCAoZXJyLCB1c2VyKSA9PiB7XG4gICAgICAgICAgICAgICAgc2hvdWxkLmV4aXN0KGVycik7XG4gICAgICAgICAgICAgICAgc2hvdWxkLm5vdC5leGlzdCh1c2VyKTtcblxuICAgICAgICAgICAgICAgIHJlcG9TcHkuY2FsbENvdW50LnNob3VsZC5lcWwoMCk7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2ZpbmRCeUlkJywgKCkgPT4ge1xuICAgICAgICBpdCgnVGVzdHMgbm90IHlldCBpbXBsZW1lbnRlZCcsIGRvbmUgPT4ge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZW1vdmVCeUlkJywgKCkgPT4ge1xuICAgICAgICBpdCgnVGVzdHMgbm90IHlldCBpbXBsZW1lbnRlZCcsIGRvbmUgPT4ge1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdUZXN0cyBub3QgeWV0IGltcGxlbWVudGVkJywgZG9uZSA9PiB7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
