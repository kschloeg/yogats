"use strict";
var _ = require('lodash');
var UserStatus = require('../model/UserStatus');
var User = require('../model/User');
var UserDocumentManager = require('../model/UserDocumentManager');
var UserManager = (function () {
    function UserManager() {
    }
    UserManager.create = function (user, callback) {
        if (!user)
            return callback(new Error("Cannot create null or undefined Object"), null);
        user.create_date = user.create_date || new Date();
        user.status_change_date = user.status_change_date || new Date();
        user.status = user.status || UserStatus.ACTIVE;
        UserDocumentManager.create(user, function (createErr, document) {
            if (createErr)
                return callback(createErr, null);
            if (!document)
                return callback(new Error("Create Error"), null);
            callback(null, new User(document));
        });
    };
    ;
    UserManager.findById = function (user_id, options, callback) {
        if (!user_id)
            return callback(new Error("Missing ID"), null);
        var criteria = { _id: user_id };
        if (!options || !options.include_inactive) {
            criteria['status'] = UserStatus.ACTIVE;
        }
        UserDocumentManager.findOne(criteria, function (findErr, document) {
            if (findErr)
                return callback(findErr, null);
            if (!document)
                return callback(null, null);
            callback(null, new User(document));
        });
    };
    UserManager.removeById = function (user_id, callback) {
        if (!user_id)
            return callback(new Error("Missing ID"), null);
        var criteria = { _id: user_id };
        UserDocumentManager.remove(criteria, callback);
    };
    UserManager.update = function (user, edits, callback) {
        if (!user || !edits)
            return callback(null, null);
        if (edits.status && edits.status !== user.status) {
            edits.status_change_date = new Date();
        }
        var userJson = user.toDocument();
        _.assign(userJson, UserManager.sanitize(edits));
        UserDocumentManager.findByIdAndUpdate(user.id, userJson, function (updateErr, document) {
            if (updateErr)
                return callback(updateErr, null);
            if (!document)
                return callback(null, null);
            callback(null, new User(document));
        });
    };
    UserManager.sanitize = function (user) {
        return _.pick(user, 'last_name', 'first_name', 'status_change_date', 'create_date', 'status');
    };
    return UserManager;
}());
module.exports = UserManager;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXIvbGliL1VzZXJNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFPLENBQUMsV0FBVyxRQUFRLENBQUMsQ0FBQztBQUc3QixJQUFPLFVBQVUsV0FBVyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ25ELElBQU8sSUFBSSxXQUFXLGVBQWUsQ0FBQyxDQUFDO0FBRXZDLElBQU8sbUJBQW1CLFdBQVcsOEJBQThCLENBQUMsQ0FBQztBQUdyRTtJQUFBO0lBOERBLENBQUM7SUE3RGlCLGtCQUFNLEdBQXBCLFVBQXFCLElBQW1CLEVBQUUsUUFBNEM7UUFDbEYsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFdEYsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2hFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDO1FBRS9DLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBQyxTQUFTLEVBQUUsUUFBc0I7WUFDL0QsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEUsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FB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VyxFQUNYLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsYUFBYSxFQUNiLFFBQVEsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFDTCxrQkFBQztBQUFELENBOURBLEFBOERDLElBQUE7QUFFRCxpQkFBUyxXQUFXLENBQUMiLCJmaWxlIjoidXNlci9saWIvVXNlck1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuaW1wb3J0IGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKTtcblxuaW1wb3J0IFVzZXJTdGF0dXMgPSByZXF1aXJlKCcuLi9tb2RlbC9Vc2VyU3RhdHVzJyk7XG5pbXBvcnQgVXNlciA9IHJlcXVpcmUoJy4uL21vZGVsL1VzZXInKTtcbmltcG9ydCBVc2VySW50ZXJmYWNlID0gcmVxdWlyZSgnLi4vbW9kZWwvVXNlckludGVyZmFjZScpO1xuaW1wb3J0IFVzZXJEb2N1bWVudE1hbmFnZXIgPSByZXF1aXJlKCcuLi9tb2RlbC9Vc2VyRG9jdW1lbnRNYW5hZ2VyJyk7XG5pbXBvcnQgVXNlckRvY3VtZW50ID0gcmVxdWlyZSgnLi4vbW9kZWwvVXNlckRvY3VtZW50Jyk7XG5cbmNsYXNzIFVzZXJNYW5hZ2VyIHtcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh1c2VyOiBVc2VySW50ZXJmYWNlLCBjYWxsYmFjazogKGVyciwgdXNlcjogVXNlckludGVyZmFjZSkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBpZiAoIXVzZXIpIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoXCJDYW5ub3QgY3JlYXRlIG51bGwgb3IgdW5kZWZpbmVkIE9iamVjdFwiKSwgbnVsbCk7XG5cbiAgICAgICAgdXNlci5jcmVhdGVfZGF0ZSA9IHVzZXIuY3JlYXRlX2RhdGUgfHwgbmV3IERhdGUoKTtcbiAgICAgICAgdXNlci5zdGF0dXNfY2hhbmdlX2RhdGUgPSB1c2VyLnN0YXR1c19jaGFuZ2VfZGF0ZSB8fCBuZXcgRGF0ZSgpO1xuICAgICAgICB1c2VyLnN0YXR1cyA9IHVzZXIuc3RhdHVzIHx8IFVzZXJTdGF0dXMuQUNUSVZFO1xuXG4gICAgICAgIFVzZXJEb2N1bWVudE1hbmFnZXIuY3JlYXRlKHVzZXIsIChjcmVhdGVFcnIsIGRvY3VtZW50OiBVc2VyRG9jdW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChjcmVhdGVFcnIpIHJldHVybiBjYWxsYmFjayhjcmVhdGVFcnIsIG51bGwpO1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIkNyZWF0ZSBFcnJvclwiKSwgbnVsbCk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBuZXcgVXNlcihkb2N1bWVudCkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHVibGljIHN0YXRpYyBmaW5kQnlJZCh1c2VyX2lkOiBzdHJpbmcsIG9wdGlvbnM6IHsgaW5jbHVkZV9pbmFjdGl2ZT86IGJvb2xlYW4gfSwgY2FsbGJhY2s6IChlcnIsIHVzZXI6IFVzZXJJbnRlcmZhY2UpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF1c2VyX2lkKSByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwiTWlzc2luZyBJRFwiKSwgbnVsbCk7XG5cbiAgICAgICAgdmFyIGNyaXRlcmlhID0geyBfaWQ6IHVzZXJfaWQgfTtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmluY2x1ZGVfaW5hY3RpdmUpIHtcbiAgICAgICAgICAgIGNyaXRlcmlhWydzdGF0dXMnXSA9IFVzZXJTdGF0dXMuQUNUSVZFO1xuICAgICAgICB9XG5cbiAgICAgICAgVXNlckRvY3VtZW50TWFuYWdlci5maW5kT25lKGNyaXRlcmlhLCAoZmluZEVyciwgZG9jdW1lbnQ6IFVzZXJEb2N1bWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpbmRFcnIpIHJldHVybiBjYWxsYmFjayhmaW5kRXJyLCBudWxsKTtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQpIHJldHVybiBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG5ldyBVc2VyKGRvY3VtZW50KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVtb3ZlQnlJZCh1c2VyX2lkOiBzdHJpbmcsIGNhbGxiYWNrKTogdm9pZCB7XG4gICAgICAgIGlmICghdXNlcl9pZCkgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIk1pc3NpbmcgSURcIiksIG51bGwpO1xuXG4gICAgICAgIHZhciBjcml0ZXJpYSA9IHsgX2lkOiB1c2VyX2lkIH07XG4gICAgICAgIFVzZXJEb2N1bWVudE1hbmFnZXIucmVtb3ZlKGNyaXRlcmlhLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB1cGRhdGUodXNlcjogVXNlckludGVyZmFjZSwgZWRpdHM6IGFueSwgY2FsbGJhY2s6IChlcnIsIHVzZXI6IFVzZXJJbnRlcmZhY2UpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF1c2VyIHx8ICFlZGl0cykgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG51bGwpO1xuXG4gICAgICAgIGlmIChlZGl0cy5zdGF0dXMgJiYgZWRpdHMuc3RhdHVzICE9PSB1c2VyLnN0YXR1cykge1xuICAgICAgICAgIGVkaXRzLnN0YXR1c19jaGFuZ2VfZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdXNlckpzb24gPSB1c2VyLnRvRG9jdW1lbnQoKTtcbiAgICAgICAgXy5hc3NpZ24odXNlckpzb24sIFVzZXJNYW5hZ2VyLnNhbml0aXplKGVkaXRzKSk7XG5cbiAgICAgICAgVXNlckRvY3VtZW50TWFuYWdlci5maW5kQnlJZEFuZFVwZGF0ZSh1c2VyLmlkLCB1c2VySnNvbiwgKHVwZGF0ZUVyciwgZG9jdW1lbnQ6IFVzZXJEb2N1bWVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHVwZGF0ZUVycikgcmV0dXJuIGNhbGxiYWNrKHVwZGF0ZUVyciwgbnVsbCk7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50KSByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBuZXcgVXNlcihkb2N1bWVudCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBzYW5pdGl6ZSh1c2VyOiB7fSk6IHt9IHtcbiAgICAgICAgcmV0dXJuIF8ucGljayh1c2VyLFxuICAgICAgICAgICAgJ2xhc3RfbmFtZScsXG4gICAgICAgICAgICAnZmlyc3RfbmFtZScsXG4gICAgICAgICAgICAnc3RhdHVzX2NoYW5nZV9kYXRlJyxcbiAgICAgICAgICAgICdjcmVhdGVfZGF0ZScsXG4gICAgICAgICAgICAnc3RhdHVzJyk7XG4gICAgfVxufVxuXG5leHBvcnQgPSBVc2VyTWFuYWdlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
